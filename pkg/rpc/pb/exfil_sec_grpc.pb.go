// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: exfil_sec.proto

package Data_Exfiltration_Security_Framework

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeAgentService_GetExfilDomains_FullMethodName       = "/exfil_kernel.NodeAgentService/GetExfilDomains"
	NodeAgentService_GenExfilDomainsLength_FullMethodName = "/exfil_kernel.NodeAgentService/GenExfilDomainsLength"
	NodeAgentService_DomainStream_FullMethodName          = "/exfil_kernel.NodeAgentService/DomainStream"
)

// NodeAgentServiceClient is the client API for NodeAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeAgentServiceClient interface {
	GetExfilDomains(ctx context.Context, in *ExfilDomains, opts ...grpc.CallOption) (*ExfilDomains, error)
	GenExfilDomainsLength(ctx context.Context, in *ExfilDomains, opts ...grpc.CallOption) (*ExfilDomainsLength, error)
	// returns the count of the stream events
	DomainStream(ctx context.Context, in *ExfilDomainsLength, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExfilDomains], error)
}

type nodeAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeAgentServiceClient(cc grpc.ClientConnInterface) NodeAgentServiceClient {
	return &nodeAgentServiceClient{cc}
}

func (c *nodeAgentServiceClient) GetExfilDomains(ctx context.Context, in *ExfilDomains, opts ...grpc.CallOption) (*ExfilDomains, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExfilDomains)
	err := c.cc.Invoke(ctx, NodeAgentService_GetExfilDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAgentServiceClient) GenExfilDomainsLength(ctx context.Context, in *ExfilDomains, opts ...grpc.CallOption) (*ExfilDomainsLength, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExfilDomainsLength)
	err := c.cc.Invoke(ctx, NodeAgentService_GenExfilDomainsLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAgentServiceClient) DomainStream(ctx context.Context, in *ExfilDomainsLength, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExfilDomains], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeAgentService_ServiceDesc.Streams[0], NodeAgentService_DomainStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExfilDomainsLength, ExfilDomains]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeAgentService_DomainStreamClient = grpc.ServerStreamingClient[ExfilDomains]

// NodeAgentServiceServer is the server API for NodeAgentService service.
// All implementations should embed UnimplementedNodeAgentServiceServer
// for forward compatibility.
type NodeAgentServiceServer interface {
	GetExfilDomains(context.Context, *ExfilDomains) (*ExfilDomains, error)
	GenExfilDomainsLength(context.Context, *ExfilDomains) (*ExfilDomainsLength, error)
	// returns the count of the stream events
	DomainStream(*ExfilDomainsLength, grpc.ServerStreamingServer[ExfilDomains]) error
}

// UnimplementedNodeAgentServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeAgentServiceServer struct{}

func (UnimplementedNodeAgentServiceServer) GetExfilDomains(context.Context, *ExfilDomains) (*ExfilDomains, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExfilDomains not implemented")
}
func (UnimplementedNodeAgentServiceServer) GenExfilDomainsLength(context.Context, *ExfilDomains) (*ExfilDomainsLength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenExfilDomainsLength not implemented")
}
func (UnimplementedNodeAgentServiceServer) DomainStream(*ExfilDomainsLength, grpc.ServerStreamingServer[ExfilDomains]) error {
	return status.Errorf(codes.Unimplemented, "method DomainStream not implemented")
}
func (UnimplementedNodeAgentServiceServer) testEmbeddedByValue() {}

// UnsafeNodeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeAgentServiceServer will
// result in compilation errors.
type UnsafeNodeAgentServiceServer interface {
	mustEmbedUnimplementedNodeAgentServiceServer()
}

func RegisterNodeAgentServiceServer(s grpc.ServiceRegistrar, srv NodeAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeAgentService_ServiceDesc, srv)
}

func _NodeAgentService_GetExfilDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExfilDomains)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAgentServiceServer).GetExfilDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAgentService_GetExfilDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAgentServiceServer).GetExfilDomains(ctx, req.(*ExfilDomains))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAgentService_GenExfilDomainsLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExfilDomains)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAgentServiceServer).GenExfilDomainsLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAgentService_GenExfilDomainsLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAgentServiceServer).GenExfilDomainsLength(ctx, req.(*ExfilDomains))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAgentService_DomainStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExfilDomainsLength)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeAgentServiceServer).DomainStream(m, &grpc.GenericServerStream[ExfilDomainsLength, ExfilDomains]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeAgentService_DomainStreamServer = grpc.ServerStreamingServer[ExfilDomains]

// NodeAgentService_ServiceDesc is the grpc.ServiceDesc for NodeAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exfil_kernel.NodeAgentService",
	HandlerType: (*NodeAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExfilDomains",
			Handler:    _NodeAgentService_GetExfilDomains_Handler,
		},
		{
			MethodName: "GenExfilDomainsLength",
			Handler:    _NodeAgentService_GenExfilDomainsLength_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DomainStream",
			Handler:       _NodeAgentService_DomainStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exfil_sec.proto",
}
